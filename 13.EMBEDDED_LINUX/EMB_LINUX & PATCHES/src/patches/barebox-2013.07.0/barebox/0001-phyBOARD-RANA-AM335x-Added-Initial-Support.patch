From aa756d8f71bcb0bf4f4565a0fc94f3adbffa9c66 Mon Sep 17 00:00:00 2001
From: Ashutosh singh <ashutosh.s@phytec.in>
Date: Thu, 19 Dec 2013 16:18:35 +0530
Subject: [PATCH 1/6] phyBOARD-RANA-AM335x: Added Initial Support.

This patch added initial support for UART0, MMC0 & RAM.

Signed-off-by: Ashutosh singh <ashutosh.s@phytec.in>
---
 arch/arm/Makefile                          |    1 +
 arch/arm/boards/rana/Makefile              |    2 +
 arch/arm/boards/rana/board.c               |   74 ++++++++++++
 arch/arm/boards/rana/env/boot/mmc          |   10 ++
 arch/arm/boards/rana/env/config-board      |    7 ++
 arch/arm/boards/rana/lowlevel.c            |  181 ++++++++++++++++++++++++++++
 arch/arm/boards/rana/mux.c                 |   20 +++
 arch/arm/boards/rana/mux.h                 |    1 +
 arch/arm/configs/rana_am335x_defconfig     |   63 ++++++++++
 arch/arm/configs/rana_am335x_mlo_defconfig |   34 ++++++
 arch/arm/mach-omap/Kconfig                 |   10 +-
 arch/arm/tools/mach-types                  |    1 +
 12 files changed, 403 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/boards/rana/Makefile
 create mode 100644 arch/arm/boards/rana/board.c
 create mode 100644 arch/arm/boards/rana/env/boot/mmc
 create mode 100644 arch/arm/boards/rana/env/config-board
 create mode 100644 arch/arm/boards/rana/lowlevel.c
 create mode 100644 arch/arm/boards/rana/mux.c
 create mode 100644 arch/arm/boards/rana/mux.h
 create mode 100644 arch/arm/configs/rana_am335x_defconfig
 create mode 100644 arch/arm/configs/rana_am335x_mlo_defconfig

diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index 5ad7408..4cb6aad 100644
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -143,6 +143,7 @@ board-$(CONFIG_MACH_PCM038)			+= pcm038
 board-$(CONFIG_MACH_PCM043)			+= pcm043
 board-$(CONFIG_MACH_PCM049)			+= pcm049
 board-$(CONFIG_MACH_PCM051)			+= pcm051
+board-$(CONFIG_MACH_RANA)			+= rana
 board-$(CONFIG_MACH_PLATHOME_OPENBLOCKS_AX3)	+= plathome-openblocks-ax3
 board-$(CONFIG_MACH_PM9261)			+= pm9261
 board-$(CONFIG_MACH_PM9263)			+= pm9263
diff --git a/arch/arm/boards/rana/Makefile b/arch/arm/boards/rana/Makefile
new file mode 100644
index 0000000..69d48e1
--- /dev/null
+++ b/arch/arm/boards/rana/Makefile
@@ -0,0 +1,2 @@
+lwl-y += lowlevel.o
+obj-y += board.o mux.o
diff --git a/arch/arm/boards/rana/board.c b/arch/arm/boards/rana/board.c
new file mode 100644
index 0000000..5c841c6
--- /dev/null
+++ b/arch/arm/boards/rana/board.c
@@ -0,0 +1,74 @@
+/*
+ * phyBOARD RANA AM335x - phyBOARD RANA AM335x Board Initalization Code
+ *
+ * Copyright (C) 2013 Ashutosh Singh, Phytec Embedded Pvt. Ltd.
+ *
+ * Based on arch/arm/boards/omap/board-beagle.c
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <bootsource.h>
+#include <common.h>
+#include <init.h>
+#include <io.h>
+#include <sizes.h>
+#include <ns16550.h>
+#include <asm/armlinux.h>
+#include <generated/mach-types.h>
+#include <mach/am33xx-devices.h>
+#include <mach/am33xx-generic.h>
+#include <mach/am33xx-mux.h>
+#include <mach/am33xx-silicon.h>
+#include <mach/generic.h>
+#include <mach/bbu.h>
+
+#include "mux.h"
+
+/* UART initialization */
+static int rana_am335x_console_init(void)
+{
+	am33xx_enable_uart0_pin_mux();
+	/* Register the serial port */
+	am33xx_add_uart0();
+
+	return 0;
+}
+console_initcall(rana_am335x_console_init);
+
+/* Memory DDR3 initialization */
+static int rana_am335x_mem_init(void)
+{
+	if (IS_ENABLED(CONFIG_512MB_MT41J256M8HX15E_2x256M8) ||
+				IS_ENABLED(CONFIG_512MB_MT41J128M16_1x512M16))
+		omap_add_ram0(SZ_512M);
+	else if (IS_ENABLED(CONFIG_128MB_MT41J64M1615IT_1x128M16))
+		omap_add_ram0(SZ_128M);
+	else if (IS_ENABLED(CONFIG_256MB_MT41J128M16125IT_1x256M16))
+		omap_add_ram0(SZ_256M);
+	else if (IS_ENABLED(CONFIG_1024MB_MT41J512M8125IT_2x512M8))
+		omap_add_ram0(SZ_1G);
+
+	return 0;
+}
+mem_initcall(rana_am335x_mem_init);
+
+/* Devices initialization */
+static int rana_am335x_devices_init(void)
+{
+	rana_am335x_enable_mmc0_pin_mux();
+	am33xx_add_mmc0(NULL);
+	armlinux_set_bootparams((void *)(AM33XX_DRAM_ADDR_SPACE_START + 0x100));
+	armlinux_set_architecture(MACH_TYPE_RANA);
+
+	return 0;
+}
+device_initcall(rana_am335x_devices_init);
diff --git a/arch/arm/boards/rana/env/boot/mmc b/arch/arm/boards/rana/env/boot/mmc
new file mode 100644
index 0000000..93a2357
--- /dev/null
+++ b/arch/arm/boards/rana/env/boot/mmc
@@ -0,0 +1,10 @@
+#!/bin/sh
+
+if [ "$1" = menu ]; then
+	boot-menu-add-entry "$0" "kernel & rootfs on SD card"
+	exit
+fi
+
+global.bootm.image=/boot/uImage
+#global.bootm.oftree=/boot/oftree
+global.linux.bootargs.dyn.root="root=/dev/mmcblk0p2 rootfstype=ext3 rootwait"
diff --git a/arch/arm/boards/rana/env/config-board b/arch/arm/boards/rana/env/config-board
new file mode 100644
index 0000000..e2deac4
--- /dev/null
+++ b/arch/arm/boards/rana/env/config-board
@@ -0,0 +1,7 @@
+#!/bin/sh
+
+# board defaults, do not change in running system. Change /env/config
+# instead
+
+global.hostname=rana-am335x
+global.linux.bootargs.base="console=ttyO0,115200"
diff --git a/arch/arm/boards/rana/lowlevel.c b/arch/arm/boards/rana/lowlevel.c
new file mode 100644
index 0000000..f0fa06c
--- /dev/null
+++ b/arch/arm/boards/rana/lowlevel.c
@@ -0,0 +1,181 @@
+#include <common.h>
+#include <sizes.h>
+#include <io.h>
+#include <init.h>
+#include <asm/barebox-arm-head.h>
+#include <asm/barebox-arm.h>
+#include <mach/am33xx-silicon.h>
+#include <mach/am33xx-clock.h>
+#include <mach/generic.h>
+#include <mach/sdrc.h>
+#include <mach/sys_info.h>
+#include <mach/syslib.h>
+#include <mach/am33xx-mux.h>
+#include <mach/am33xx-generic.h>
+#include <mach/wdt.h>
+
+static const struct am33xx_cmd_control rana_am335x_cmd = {
+	.slave_ratio0		= 0x40,
+	.dll_lock_diff0		= 0x0,
+	.invert_clkout0		= 0x1,
+	.slave_ratio1		= 0x40,
+	.dll_lock_diff1		= 0x0,
+	.invert_clkout1		= 0x1,
+	.slave_ratio2		= 0x40,
+	.dll_lock_diff2		= 0x0,
+	.invert_clkout2		= 0x1,
+};
+
+/* 1x512MB */
+static const struct am33xx_emif_regs MT41J256M16HA15EIT_1x512M16_regs = {
+	.emif_read_latency	= 0x6,
+	.emif_tim1		= 0x0888A39B,
+	.emif_tim2		= 0x26517FDA,
+	.emif_tim3		= 0x501F84EF,
+	.sdram_config		= 0x61C04B32,
+	.zq_config		= 0x50074BE4,
+	.sdram_ref_ctrl		= 0x0000093B,
+};
+
+static const struct am33xx_ddr_data MT41J256M16HA15EIT_1x512M16_data = {
+	.rd_slave_ratio0	= 0x3B,
+	.wr_dqs_slave_ratio0	= 0x3B,
+	.fifo_we_slave_ratio0	= 0x96,
+	.wr_slave_ratio0	= 0x76,
+};
+
+/* 2x256MB */
+static const struct am33xx_emif_regs MT41J256M8HX15E_2x256M8_regs = {
+	.emif_read_latency	= 0x6,
+	.emif_tim1		= 0x0668A39B,
+	.emif_tim2		= 0x26337FDA,
+	.emif_tim3		= 0x501F830F,
+	.sdram_config		= 0x61C04832,
+	.zq_config		= 0x50074BE4,
+	.sdram_ref_ctrl		= 0x0000093B,
+};
+
+static const struct am33xx_ddr_data MT41J256M8HX15E_2x256M8_data = {
+	.rd_slave_ratio0	= 0x3B,
+	.wr_dqs_slave_ratio0	= 0x85,
+	.fifo_we_slave_ratio0	= 0x100,
+	.wr_slave_ratio0	= 0xC1,
+};
+
+/* 1x128M16 */
+static const struct am33xx_emif_regs MT41J64M1615IT_1x128M16_regs = {
+	.emif_read_latency	= 0x6,
+	.emif_tim1		= 0x0888A39B,
+	.emif_tim2		= 0x26247FDA,
+	.emif_tim3		= 0x501F821F,
+	.sdram_config		= 0x61C04A32,
+	.zq_config		= 0x50074BE4,
+	.sdram_ref_ctrl		= 0x0000093B,
+};
+
+static const struct am33xx_ddr_data MT41J64M1615IT_1x128M16_data = {
+	.rd_slave_ratio0	= 0x3A,
+	.wr_dqs_slave_ratio0	= 0x36,
+	.fifo_we_slave_ratio0	= 0xA2,
+	.wr_slave_ratio0	= 0x74,
+};
+
+/* 1x256M16 */
+static const struct am33xx_emif_regs MT41J128M16125IT_1x256M16_regs = {
+	.emif_read_latency	= 0x6,
+	.emif_tim1		= 0x0888A39B,
+	.emif_tim2		= 0x26337FDA,
+	.emif_tim3		= 0x501F830F,
+	.sdram_config		= 0x61C04AB2,
+	.zq_config		= 0x50074BE4,
+	.sdram_ref_ctrl		= 0x0000093B,
+};
+
+static const struct am33xx_ddr_data MT41J128M16125IT_1x256M16_data = {
+	.rd_slave_ratio0	= 0x3B,
+	.wr_dqs_slave_ratio0	= 0x3B,
+	.fifo_we_slave_ratio0	= 0x97,
+	.wr_slave_ratio0	= 0x76,
+};
+
+/* 2x512M8 */
+static const struct am33xx_emif_regs MT41J512M8125IT_2x512M8_regs = {
+	.emif_read_latency	= 0x6,
+	.emif_tim1		= 0x0888A39B,
+	.emif_tim2		= 0x26517FDA,
+	.emif_tim3		= 0x501F84EF,
+	.sdram_config		= 0x61C04B32,
+	.zq_config		= 0x50074BE4,
+	.sdram_ref_ctrl		= 0x0000093B,
+};
+
+static const struct am33xx_ddr_data MT41J512M8125IT_2x512M8_data = {
+	.rd_slave_ratio0	= 0x39,
+	.wr_dqs_slave_ratio0	= 0x38,
+	.fifo_we_slave_ratio0	= 0x98,
+	.wr_slave_ratio0	= 0x76,
+};
+
+/**
+ * @brief The basic entry point for board initialization.
+ *
+ * This is called as part of machine init (after arch init).
+ * This is again called with stack in SRAM, so not too many
+ * constructs possible here.
+ *
+ * @return void
+ */
+static int rana_am335x_board_init(void)
+{
+	/* WDT1 is already running when the bootloader gets control
+	 * Disable it to avoid "random" resets
+	 */
+	writel(WDT_DISABLE_CODE1, AM33XX_WDT_REG(WSPR));
+	while (readl(AM33XX_WDT_REG(WWPS)) != 0x0);
+
+	writel(WDT_DISABLE_CODE2, AM33XX_WDT_REG(WSPR));
+	while (readl(AM33XX_WDT_REG(WWPS)) != 0x0);
+
+	if (running_in_sdram())
+		return 0;
+
+	pll_init(MPUPLL_M_600, 25, DDRPLL_M_303);
+
+	if (IS_ENABLED(CONFIG_512MB_MT41J128M16_1x512M16))
+		am335x_sdram_init
+			(0x18B, &rana_am335x_cmd,
+				&MT41J256M16HA15EIT_1x512M16_regs,
+				&MT41J256M16HA15EIT_1x512M16_data);
+	else if (IS_ENABLED(CONFIG_512MB_MT41J256M8HX15E_2x256M8))
+		am335x_sdram_init
+			(0x18B, &rana_am335x_cmd,
+				&MT41J256M8HX15E_2x256M8_regs,
+				&MT41J256M8HX15E_2x256M8_data);
+	else if (IS_ENABLED(CONFIG_128MB_MT41J64M1615IT_1x128M16))
+		am335x_sdram_init
+			(0x18B, &rana_am335x_cmd,
+				&MT41J64M1615IT_1x128M16_regs,
+				&MT41J64M1615IT_1x128M16_data);
+	else if (IS_ENABLED(CONFIG_256MB_MT41J128M16125IT_1x256M16))
+		am335x_sdram_init
+			(0x18B, &rana_am335x_cmd,
+				&MT41J128M16125IT_1x256M16_regs,
+				&MT41J128M16125IT_1x256M16_data);
+	else if (IS_ENABLED(CONFIG_1024MB_MT41J512M8125IT_2x512M8))
+		am335x_sdram_init
+			(0x18B, &rana_am335x_cmd,
+				&MT41J512M8125IT_2x512M8_regs,
+				&MT41J512M8125IT_2x512M8_data);
+	am33xx_uart0_soft_reset();
+	am33xx_enable_uart0_pin_mux();
+
+	return 0;
+}
+
+void __naked __bare_init barebox_arm_reset_vector(uint32_t *data)
+{
+	am33xx_save_bootinfo(data);
+	arm_cpu_lowlevel_init();
+	rana_am335x_board_init();
+	barebox_arm_entry(0x80000000, SZ_128M, 0);
+}
diff --git a/arch/arm/boards/rana/mux.c b/arch/arm/boards/rana/mux.c
new file mode 100644
index 0000000..d0160c8
--- /dev/null
+++ b/arch/arm/boards/rana/mux.c
@@ -0,0 +1,20 @@
+#include <common.h>
+#include <config.h>
+#include <asm/io.h>
+#include <mach/am33xx-mux.h>
+
+static const struct module_pin_mux mmc0_pin_mux[] = {
+	{OFFSET(mmc0_dat3), (MODE(0) | RXACTIVE | PULLUP_EN)},  /* MMC0_DAT3 */
+	{OFFSET(mmc0_dat2), (MODE(0) | RXACTIVE | PULLUP_EN)},  /* MMC0_DAT2 */
+	{OFFSET(mmc0_dat1), (MODE(0) | RXACTIVE | PULLUP_EN)},  /* MMC0_DAT1 */
+	{OFFSET(mmc0_dat0), (MODE(0) | RXACTIVE | PULLUP_EN)},  /* MMC0_DAT0 */
+	{OFFSET(mmc0_clk), (MODE(0) | RXACTIVE | PULLUP_EN)},   /* MMC0_CLK */
+	{OFFSET(mmc0_cmd), (MODE(0) | RXACTIVE | PULLUP_EN)},   /* MMC0_CMD */
+	{OFFSET(spi0_cs1), (MODE(7) | RXACTIVE | PULLUP_EN)},   /* MMC0_CD */
+	{-1},
+};
+
+void rana_am335x_enable_mmc0_pin_mux(void)
+{
+	configure_module_pin_mux(mmc0_pin_mux);
+}
diff --git a/arch/arm/boards/rana/mux.h b/arch/arm/boards/rana/mux.h
new file mode 100644
index 0000000..b2d7edb
--- /dev/null
+++ b/arch/arm/boards/rana/mux.h
@@ -0,0 +1 @@
+extern void rana_am335x_enable_mmc0_pin_mux(void);
diff --git a/arch/arm/configs/rana_am335x_defconfig b/arch/arm/configs/rana_am335x_defconfig
new file mode 100644
index 0000000..17d77b0
--- /dev/null
+++ b/arch/arm/configs/rana_am335x_defconfig
@@ -0,0 +1,63 @@
+CONFIG_ARCH_OMAP=y
+CONFIG_ARCH_AM33XX=y
+CONFIG_BAREBOX_UPDATE_AM33XX_SPI_NOR_MLO=y
+CONFIG_MACH_RANA=y
+CONFIG_OMAP_UART1=y
+CONFIG_128MB_MT41J64M1615IT_1x128M16=y
+CONFIG_AEABI=y
+CONFIG_ARM_BOARD_APPEND_ATAG=y
+CONFIG_CMD_ARM_MMUINFO=y
+CONFIG_ARM_OPTIMZED_STRING_FUNCTIONS=y
+CONFIG_ARM_UNWIND=y
+CONFIG_MMU=y
+CONFIG_TEXT_BASE=0x8f000000
+CONFIG_MALLOC_SIZE=0x2000000
+CONFIG_PROMPT="barebox@rana-AM335X>"
+CONFIG_LONGHELP=y
+CONFIG_HUSH_FANCY_PROMPT=y
+CONFIG_CMDLINE_EDITING=y
+CONFIG_AUTO_COMPLETE=y
+CONFIG_MENU=y
+# CONFIG_TIMESTAMP is not set
+CONFIG_DEFAULT_ENVIRONMENT_GENERIC_NEW=y
+CONFIG_DEFAULT_ENVIRONMENT_PATH="arch/arm/boards/rana/env"
+CONFIG_DEBUG_INFO=y
+CONFIG_ENABLE_FLASH_NOISE=y
+CONFIG_ENABLE_PARTITION_NOISE=y
+CONFIG_ENABLE_DEVICE_NOISE=y
+CONFIG_CMD_EDIT=y
+CONFIG_CMD_SLEEP=y
+CONFIG_CMD_SAVEENV=y
+CONFIG_CMD_EXPORT=y
+CONFIG_CMD_PRINTENV=y
+CONFIG_CMD_READLINE=y
+CONFIG_CMD_MENU=y
+CONFIG_CMD_MENU_MANAGEMENT=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_ECHO_E=y
+CONFIG_CMD_LOADB=y
+CONFIG_CMD_CRC=y
+CONFIG_CMD_CRC_CMP=y
+CONFIG_CMD_MD5SUM=y
+CONFIG_CMD_FLASH=y
+CONFIG_CMD_BOOTM_SHOW_TYPE=y
+CONFIG_CMD_UIMAGE=y
+CONFIG_CMD_BOOTZ=y
+CONFIG_CMD_RESET=y
+CONFIG_CMD_GO=y
+CONFIG_CMD_BAREBOX_UPDATE=y
+CONFIG_CMD_TIMEOUT=y
+CONFIG_CMD_PARTITION=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_UNCOMPRESS=y
+CONFIG_CMD_SPI=y
+CONFIG_DRIVER_SERIAL_NS16550=y
+CONFIG_DRIVER_SERIAL_NS16550_OMAP_EXTENSIONS=y
+CONFIG_DRIVER_SPI_OMAP3=y
+CONFIG_MCI=y
+CONFIG_MCI_STARTUP=y
+CONFIG_MCI_OMAP_HSMMC=y
+CONFIG_GPIO_GENERIC_PLATFORM=y
+CONFIG_FS_FAT=y
+CONFIG_FS_FAT_WRITE=y
+CONFIG_FS_FAT_LFN=y
diff --git a/arch/arm/configs/rana_am335x_mlo_defconfig b/arch/arm/configs/rana_am335x_mlo_defconfig
new file mode 100644
index 0000000..16b289e
--- /dev/null
+++ b/arch/arm/configs/rana_am335x_mlo_defconfig
@@ -0,0 +1,34 @@
+CONFIG_ARCH_OMAP=y
+CONFIG_ARCH_AM33XX=y
+CONFIG_OMAP_BUILD_IFT=y
+CONFIG_MACH_RANA=y
+CONFIG_OMAP_UART1=y
+CONFIG_128MB_MT41J64M1615IT_1x128M16=y
+CONFIG_THUMB2_BAREBOX=y
+# CONFIG_CMD_ARM_CPUINFO is not set
+# CONFIG_MEMINFO is not set
+CONFIG_ENVIRONMENT_VARIABLES=y
+CONFIG_MMU=y
+CONFIG_TEXT_BASE=0x402F0400
+CONFIG_STACK_SIZE=0x1600
+CONFIG_MALLOC_SIZE=0x1000000
+CONFIG_PROMPT="MLO>"
+CONFIG_SHELL_NONE=y
+# CONFIG_ERRNO_MESSAGES is not set
+# CONFIG_TIMESTAMP is not set
+CONFIG_CONSOLE_SIMPLE=y
+# CONFIG_DEFAULT_ENVIRONMENT is not set
+CONFIG_DRIVER_SERIAL_NS16550=y
+CONFIG_DRIVER_SERIAL_NS16550_OMAP_EXTENSIONS=y
+CONFIG_DRIVER_SPI_OMAP3=y
+CONFIG_MTD=y
+CONFIG_MTD_M25P80=y
+CONFIG_NAND=y
+CONFIG_NAND_OMAP_GPMC=y
+CONFIG_MCI=y
+CONFIG_MCI_STARTUP=y
+CONFIG_MCI_OMAP_HSMMC=y
+# CONFIG_FS_RAMFS is not set
+# CONFIG_FS_DEVFS is not set
+CONFIG_FS_FAT=y
+CONFIG_FS_FAT_LFN=y
diff --git a/arch/arm/mach-omap/Kconfig b/arch/arm/mach-omap/Kconfig
index 5dec8c1..313bb72 100644
--- a/arch/arm/mach-omap/Kconfig
+++ b/arch/arm/mach-omap/Kconfig
@@ -130,6 +130,7 @@ config BOARDINFO
 	default "Phytec phyCARD-A-L1" if MACH_PCAAL1
 	default "Phytec phyCARD-A-XL2" if MACH_PCAAXL2
 	default "Phytec phyCORE-AM335x" if MACH_PCM051
+	default "Phytec phyBOARD RANA AM335x" if MACH_RANA
 
 choice
 	prompt "Select OMAP board"
@@ -198,6 +199,13 @@ config MACH_PCM051
 	help
 	  Say Y here if you are using Phytecs phyCORE pcm051 board
 
+config MACH_RANA
+	bool "Phytec phyBOARD RANA AM335"
+	select HAVE_DEFAULT_ENVIRONMENT_NEW
+	depends on ARCH_AM33XX
+	help
+	  Say Y here if you are using Phytec's phyBOARD RANA-AM335
+
 endchoice
 
 if ARCH_OMAP
@@ -234,7 +242,7 @@ if MACH_PCM049
 	endchoice
 endif
 
-if MACH_PCM051
+if MACH_PCM051 || MACH_RANA
 	choice
 	prompt "Select DDR3 RAM"
 
diff --git a/arch/arm/tools/mach-types b/arch/arm/tools/mach-types
index 325513f..f1fa995 100644
--- a/arch/arm/tools/mach-types
+++ b/arch/arm/tools/mach-types
@@ -4148,3 +4148,4 @@ msm8625_evt		MACH_MSM8625_EVT	MSM8625_EVT		4193
 mx53_sellwood		MACH_MX53_SELLWOOD	MX53_SELLWOOD		4194
 somiq_am35		MACH_SOMIQ_AM35		SOMIQ_AM35		4195
 somiq_am37		MACH_SOMIQ_AM37		SOMIQ_AM37		4196
+rana			MACH_RANA		RANA			4803
-- 
1.7.9.5

